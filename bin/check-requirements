#!/bin/bash
###***check-requirements***###
# System requirements checker and installer for brewsearch

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Counters
MISSING_COUNT=0
INSTALLED_COUNT=0

echo -e "${BLUE}=== BrewSearch Requirements Checker ===${NC}\n"

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to print status
print_status() {
    local status=$1
    local message=$2
    if [ "$status" = "ok" ]; then
        echo -e "${GREEN}✓${NC} $message"
    elif [ "$status" = "missing" ]; then
        echo -e "${RED}✗${NC} $message"
        ((MISSING_COUNT++))
    elif [ "$status" = "warning" ]; then
        echo -e "${YELLOW}⚠${NC} $message"
    elif [ "$status" = "info" ]; then
        echo -e "${BLUE}ℹ${NC} $message"
    fi
}

# Check Bash version
echo "Checking Bash version..."
BASH_VERSION_NUM="${BASH_VERSION%%.*}"
if [ "$BASH_VERSION_NUM" -ge 4 ]; then
    print_status "ok" "Bash $BASH_VERSION (>= 4.0 required)"
else
    print_status "missing" "Bash $BASH_VERSION (4.0+ required)"
fi
echo

# Check Homebrew
echo "Checking Homebrew..."
if command_exists brew; then
    BREW_VERSION=$(brew --version | head -n1)
    print_status "ok" "$BREW_VERSION"
else
    print_status "missing" "Homebrew not found"
    echo -e "${YELLOW}Install Homebrew:${NC}"
    echo "  /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
    echo "  https://brew.sh"
fi
echo

# Check for package managers (optional but recommended)
echo "Checking package managers (optional)..."
HAS_PKG_MANAGER=false

if command_exists mise; then
    MISE_VERSION=$(mise --version)
    print_status "ok" "mise $MISE_VERSION"
    HAS_PKG_MANAGER=true
else
    print_status "warning" "mise not found (recommended for environment management)"
fi

if command_exists uv; then
    UV_VERSION=$(uv --version)
    print_status "ok" "$UV_VERSION"
    HAS_PKG_MANAGER=true
else
    print_status "warning" "uv not found (alternative to mise)"
fi

if [ "$HAS_PKG_MANAGER" = false ]; then
    echo
    echo -e "${YELLOW}Recommended: Install a package manager for better environment management${NC}"
    echo
    echo -e "${BLUE}Option 1: mise (Recommended)${NC}"
    echo "  curl https://mise.run | sh"
    echo "  https://mise.jdx.dev"
    echo
    echo -e "${BLUE}Option 2: uv${NC}"
    echo "  curl -LsSf https://astral.sh/uv/install.sh | sh"
    echo "  https://docs.astral.sh/uv/"
fi
echo

# Check grep (should be available on all Unix systems)
echo "Checking core utilities..."
if command_exists grep; then
    print_status "ok" "grep available"
else
    print_status "missing" "grep not found"
fi

if command_exists xargs; then
    print_status "ok" "xargs available"
else
    print_status "missing" "xargs not found"
fi
echo

# Check for .env file
echo "Checking configuration..."
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

if [ -f "$PROJECT_ROOT/.env" ]; then
    print_status "ok" ".env file exists"
    
    # Check for required environment variables
    if grep -q "EXA_API_KEY" "$PROJECT_ROOT/.env"; then
        if grep -q "EXA_API_KEY=your_exa_api_key_here" "$PROJECT_ROOT/.env"; then
            print_status "warning" "EXA_API_KEY not configured (using placeholder)"
        else
            print_status "ok" "EXA_API_KEY configured"
        fi
    else
        print_status "warning" "EXA_API_KEY not found in .env"
    fi
else
    print_status "missing" ".env file not found"
    echo -e "${YELLOW}Create .env file:${NC}"
    echo "  cp .env.example .env"
    echo "  # Then edit .env and add your API keys"
fi
echo

# Summary
echo -e "${BLUE}=== Summary ===${NC}"
if [ $MISSING_COUNT -eq 0 ]; then
    echo -e "${GREEN}✓ All required dependencies are installed!${NC}"
    echo
    echo "You can now use brewsearch:"
    echo "  ./bin/brewsearch redis"
    echo
    echo "Or create a symlink for easier access:"
    echo "  ln -s $(pwd)/bin/brewsearch ~/.local/bin/bs"
    exit 0
else
    echo -e "${RED}✗ $MISSING_COUNT required dependencies are missing${NC}"
    echo
    echo "Please install the missing dependencies and run this script again."
    exit 1
fi
